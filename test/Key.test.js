import { Key } from '../src/Key'

const A = 10
const B = 20
const C = 30
const KEY_TEST_SIZE = 40

describe('Key', () => {
  test('should match correctly', () => {
    const keyNone = new Key(KEY_TEST_SIZE)
    const keyA = new Key(KEY_TEST_SIZE).set(A)
    const keyB = new Key(KEY_TEST_SIZE).set(B)
    const keyC = new Key(KEY_TEST_SIZE).set(C)
    const keyAB = new Key(KEY_TEST_SIZE).set(A).set(B)
    const keyBC = new Key(KEY_TEST_SIZE).set(B).set(C)
    const keyAC = new Key(KEY_TEST_SIZE).set(A).set(C)
    const keyABC = new Key(KEY_TEST_SIZE).set(A).set(B).set(C)

    expect(keyNone.matches(keyNone)).toBe(true)
    expect(keyNone.matches(keyA)).toBe(false)
    expect(keyNone.matches(keyB)).toBe(false)
    expect(keyNone.matches(keyC)).toBe(false)
    expect(keyNone.matches(keyAB)).toBe(false)
    expect(keyNone.matches(keyBC)).toBe(false)
    expect(keyNone.matches(keyAC)).toBe(false)
    expect(keyNone.matches(keyABC)).toBe(false)

    expect(keyA.matches(keyNone)).toBe(true)
    expect(keyA.matches(keyA)).toBe(true)
    expect(keyA.matches(keyB)).toBe(false)
    expect(keyA.matches(keyC)).toBe(false)
    expect(keyA.matches(keyAB)).toBe(false)
    expect(keyA.matches(keyBC)).toBe(false)
    expect(keyA.matches(keyAC)).toBe(false)
    expect(keyA.matches(keyABC)).toBe(false)

    expect(keyB.matches(keyNone)).toBe(true)
    expect(keyB.matches(keyA)).toBe(false)
    expect(keyB.matches(keyB)).toBe(true)
    expect(keyB.matches(keyC)).toBe(false)
    expect(keyB.matches(keyAB)).toBe(false)
    expect(keyB.matches(keyBC)).toBe(false)
    expect(keyB.matches(keyAC)).toBe(false)
    expect(keyB.matches(keyABC)).toBe(false)

    expect(keyC.matches(keyNone)).toBe(true)
    expect(keyC.matches(keyA)).toBe(false)
    expect(keyC.matches(keyB)).toBe(false)
    expect(keyC.matches(keyC)).toBe(true)
    expect(keyC.matches(keyAB)).toBe(false)
    expect(keyC.matches(keyBC)).toBe(false)
    expect(keyC.matches(keyAC)).toBe(false)
    expect(keyC.matches(keyABC)).toBe(false)

    expect(keyAB.matches(keyNone)).toBe(true)
    expect(keyAB.matches(keyA)).toBe(true)
    expect(keyAB.matches(keyB)).toBe(true)
    expect(keyAB.matches(keyC)).toBe(false)
    expect(keyAB.matches(keyAB)).toBe(true)
    expect(keyAB.matches(keyBC)).toBe(false)
    expect(keyAB.matches(keyAC)).toBe(false)
    expect(keyAB.matches(keyABC)).toBe(false)

    expect(keyBC.matches(keyNone)).toBe(true)
    expect(keyBC.matches(keyA)).toBe(false)
    expect(keyBC.matches(keyB)).toBe(true)
    expect(keyBC.matches(keyC)).toBe(true)
    expect(keyBC.matches(keyAB)).toBe(false)
    expect(keyBC.matches(keyBC)).toBe(true)
    expect(keyBC.matches(keyAC)).toBe(false)
    expect(keyBC.matches(keyABC)).toBe(false)

    expect(keyAC.matches(keyNone)).toBe(true)
    expect(keyAC.matches(keyA)).toBe(true)
    expect(keyAC.matches(keyB)).toBe(false)
    expect(keyAC.matches(keyC)).toBe(true)
    expect(keyAC.matches(keyAB)).toBe(false)
    expect(keyAC.matches(keyBC)).toBe(false)
    expect(keyAC.matches(keyAC)).toBe(true)
    expect(keyAC.matches(keyABC)).toBe(false)

    expect(keyABC.matches(keyNone)).toBe(true)
    expect(keyABC.matches(keyA)).toBe(true)
    expect(keyABC.matches(keyB)).toBe(true)
    expect(keyABC.matches(keyC)).toBe(true)
    expect(keyABC.matches(keyAB)).toBe(true)
    expect(keyABC.matches(keyBC)).toBe(true)
    expect(keyABC.matches(keyAC)).toBe(true)
    expect(keyABC.matches(keyABC)).toBe(true)
  })
})
