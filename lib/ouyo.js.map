{"version":3,"file":"ouyo.js","sources":["../src/Entity.ts","../src/Events.ts","../src/World.ts","../src/Query.ts","../src/systems.ts","../src/Game.ts","../src/selectors.ts"],"sourcesContent":["import { ComponentClass } from './components'\n\ntype ComponentMap = {\n  [key: string]: any\n}\n\nlet idSequence = 0\n\nexport class Entity {\n  private _components: ComponentMap = Object.create(null)\n  private _changeRegistered = false\n  private _registerChange?: (entity: Entity) => void\n\n  readonly id = idSequence++\n\n  constructor (_registerChange?: (entity: Entity) => void) {\n    this._registerChange = _registerChange\n  }\n\n  add (instance: any) {\n    if (instance == null) {\n      throw new Error('Entity.add :: Argument is not a component instance.')\n    }\n\n    const componentClass = instance.constructor\n\n    if (!componentClass || !componentClass.id) {\n      throw new Error('Entity.add :: Argument is not a component instance.')\n    } else if (this._components[componentClass.id]) {\n      throw new Error('Entity.add :: Component class already present.')\n    }\n\n    this._components[componentClass.id] = instance\n    this._onChange()\n\n    return this\n  }\n\n  has (componentClass: ComponentClass<any>) {\n    if (!componentClass || !componentClass.id) {\n      throw new Error('Entity.has :: Argument is not a component class.')\n    }\n\n    return !!this._components[componentClass.id]\n  }\n\n  get <T> (componentClass: ComponentClass<T>): T {\n    if (!componentClass || !componentClass.id) {\n      throw new Error('Entity.get :: Argument is not a component class.')\n    }\n\n    const component = this._components[componentClass.id]\n\n    if (!component) {\n      throw new Error('Entity.get :: Component class not present.')\n    }\n\n    return <T>component\n  }\n\n  remove (componentClass: ComponentClass<any>) {\n    if (!componentClass || !componentClass.id) {\n      throw new Error('Entity.remove :: Argument is not a component class.')\n    }\n\n    this._components[componentClass.id] = undefined\n    this._onChange()\n\n    return this\n  }\n\n  private _onChange () {\n    if (!this._changeRegistered && this._registerChange) {\n      this._registerChange(this)\n      this._changeRegistered = true\n    }\n  }\n}\n\nexport function notifyAfterChangeRegistered (entity: Entity) {\n  (<any>entity)._changeRegistered = false\n}\n","type EventTimeMap = {\n  [key: string]: number | undefined\n}\n\nexport type Event = {\n  type: string,\n  timeDelta: number\n}\n\nexport class Events {\n  private _events: Event[] = []\n  private _eventTimes: EventTimeMap = {}\n\n  emit (event: string | Event, time: number) {\n    if (typeof event === 'string') {\n      event = <Event>{ type: event }\n    }\n\n    let lastTime = this._eventTimes[event.type]\n    if (lastTime == null) {\n      lastTime = time\n    }\n\n    event.timeDelta = time - lastTime\n    this._eventTimes[event.type] = time\n    this._events.push(event)\n  }\n\n  get (eventType: string) {\n    return this._events.filter(\n      event => event.type === eventType\n    )\n  }\n\n  clear () {\n    this._events.length = 0\n  }\n}\n","import { Entity, notifyAfterChangeRegistered } from './Entity'\nimport { Game } from './Game'\nimport { Events, Event } from './Events'\nimport { Query } from './Query'\n\nexport interface World {\n  readonly time: number,\n  createEntity (assemblage?: (entity: Entity) => void): Entity,\n  removeEntity (entity: Entity): void,\n  emit (event: Event | string): void\n}\n\nexport class GameWorld implements World {\n  private _queries: Query[]\n  private _changedEntities: Entity[] = []\n  private _removedEntities: Entity[] = []\n\n  private _events = new Events()\n  private _time?: number\n\n  constructor (_queries: Query[]) {\n    this._queries = _queries\n  }\n\n  get time () {\n    return this._time || 0\n  }\n\n  createEntity (assemblage?: (entity: Entity) => void) {\n    const entity = new Entity(this._onEntityChange)\n    if (assemblage) {\n      assemblage(entity)\n    }\n    return entity\n  }\n\n  private _onEntityChange = (entity: Entity) => this._changedEntities.push(entity)\n\n  removeEntity (entity: Entity) {\n    this._removedEntities.push(entity)\n  }\n\n  emit (event: Event | string) {\n    this._events.emit(event, this._time || 0)\n  }\n\n  _internal_getEvents (type: string) {\n    return this._events.get(type)\n  }\n\n  _internal_tick (time: number) {\n    this._time = time\n    this._events.clear()\n    this.emit('tick')\n  }\n\n  _internal_handleChanges () {\n    for (const entity of this._changedEntities) {\n      for (const query of this._queries) {\n        query.onChange(entity)\n      }\n      notifyAfterChangeRegistered(entity)\n    }\n    this._changedEntities.length = 0\n\n    for (const entity of this._removedEntities) {\n      for (const query of this._queries) {\n        query.onRemove(entity)\n      }\n    }\n    this._removedEntities.length = 0\n  }\n}\n","import { Entity } from './Entity'\nimport { Selector } from './selectors'\n\nexport function createQuery (selectors: Selector | Selector[]): Query {\n  if (Array.isArray(selectors)) {\n    return new MultiQuery(selectors)\n  } else {\n    return new SingleQuery(selectors)\n  }\n}\n\nexport type Query = SingleQuery | MultiQuery\n\nexport class SingleQuery {\n  private _entities: Entity[] = []\n  private _indexMap: { [key: number]: number } = {}\n  private _selector: Selector\n\n  constructor (_selector: Selector) {\n    if (typeof _selector !== 'function') {\n      throw new Error('new Query :: selector must be a function')\n    }\n    this._selector = _selector\n  }\n\n  get entities () {\n    return this._entities\n  }\n\n  onChange (entity: Entity) {\n    if (this._selector(entity)) {\n      if (this._indexMap[entity.id] == null) {\n        this._indexMap[entity.id] = this.entities.length\n        this._entities.push(entity)\n      }\n    } else {\n      this.onRemove(entity)\n    }\n  }\n\n  onRemove (entity: Entity) {\n    const index = this._indexMap[entity.id]\n    if (index != null) {\n      const last = <Entity>this._entities.pop()\n      if (last !== entity) {\n        this._entities[index] = last\n        this._indexMap[last.id] = index\n      }\n    }\n  }\n}\n\nexport class MultiQuery {\n  private _queries: SingleQuery[]\n\n  constructor (_selectors: Selector[]) {\n    this._queries = _selectors.map(selector => new SingleQuery(selector))\n  }\n\n  get entities () {\n    return this._queries.map(query => query.entities)\n  }\n\n  onChange (entity: Entity) {\n    for (const query of this._queries) {\n      query.onChange(entity)\n    }\n  }\n\n  onRemove (entity: Entity) {\n    for (const query of this._queries) {\n      query.onRemove(entity)\n    }\n  }\n}\n","import { Entity } from './Entity'\nimport { Event } from './Events'\nimport { World } from './World'\nimport { createQuery, Query } from './Query'\nimport { Selector } from './selectors'\n\nexport type System =\n  StandardSystem |\n  MultiQuerySystem |\n  IterativeSystem\n\nexport interface StandardSystem {\n  query?: Selector,\n  on?: string,\n  process (entites: Entity[], world: World, event: Event): void\n}\n\nexport interface MultiQuerySystem {\n  query?: Selector[],\n  on?: string,\n  process (entites: Entity[][], world: World, event: Event): void\n}\n\nexport interface IterativeSystem {\n  query: (entity: Entity) => boolean,\n  on?: string,\n  processEntity (entity: Entity, world: World, event: Event): void\n}\n\nexport interface InternalSystem {\n  query?: Query,\n  on: string,\n  process (entites: Entity[] | Entity[][], world: World, event: Event): void\n}\n\nexport function toInternalSystem (system: System): InternalSystem {\n  const process = isIterativeSystem(system)\n    ? createProcess(system.processEntity)\n    : system.process\n\n  return {\n    query: system.query && createQuery(system.query),\n    on: system.on || 'tick',\n    process\n  }\n}\n\nfunction isIterativeSystem (system: System): system is IterativeSystem {\n  return !(<any>system).process\n}\n\nfunction createProcess (processEntity: IterativeSystem['processEntity']) {\n  return function (entities: Entity[], world: World, event: Event) {\n    for (const entity of entities) {\n      processEntity(entity, world, event)\n    }\n  }\n}\n","import { Query } from './Query'\nimport { World, GameWorld } from './World'\nimport { System, InternalSystem, toInternalSystem } from './systems'\n\nexport class Game {\n  private _systems: InternalSystem[] = []\n  private _world: GameWorld\n\n  constructor (systems: System[], init?: (world: World) => void) {\n    this._systems = systems.map(toInternalSystem)\n    this._world = new GameWorld(\n      <Query[]>this._systems\n        .map(system => system.query)\n        .filter(query => !!query)\n    )\n    if (init) {\n      init(this._world)\n    }\n  }\n\n  update (time: number) {\n    this._world._internal_tick(time)\n\n    for (const system of this._systems) {\n      const events = this._world._internal_getEvents(system.on)\n      for (const event of events) {\n        this._world._internal_handleChanges()\n        const entities = system.query ? system.query.entities : []\n        system.process(entities, this._world, event)\n      }\n    }\n  }\n\n  start () {\n    const update = () => {\n      requestAnimationFrame(update)\n      this.update(Date.now() / 1000)\n    }\n    update()\n  }\n}\n","import { Entity } from './Entity'\nimport { ComponentClass } from './components'\n\nexport type Selector = (entity: Entity) => boolean\n\nexport function hasAll (...components: ComponentClass<any>[]): Selector {\n  if (!components.every(isComponent)) {\n    throw new Error('hasAll :: All arguments must be components.')\n  }\n\n  return entity => components.every(\n    component => entity.has(component)\n  )\n}\n\nexport function hasAny (...components: ComponentClass<any>[]): Selector {\n  if (!components.every(isComponent)) {\n    throw new Error('hasAny :: All arguments must be components.')\n  }\n\n  return entity => components.some(\n    component => entity.has(component)\n  )\n}\n\nfunction isComponent (componentClass: any): componentClass is ComponentClass<any> {\n  return componentClass && componentClass.id\n}\n"],"names":["idSequence","_registerChange","this","Object","create","Entity","instance","Error","componentClass","constructor","id","_components","_onChange","component","undefined","_changeRegistered","entity","Events","event","time","type","lastTime","_eventTimes","timeDelta","_events","push","eventType","filter","length","_queries","_this","_changedEntities","GameWorld","_time","assemblage","_onEntityChange","_removedEntities","emit","get","clear","_a","_i","_c","_b","onChange","notifyAfterChangeRegistered","_e","_d","_g","_f","onRemove","_selector","SingleQuery","_entities","_indexMap","entities","index","last","pop","_selectors","map","selector","MultiQuery","query","system","processEntity","selectors","process","isIterativeSystem","world","entities_1","Array","isArray","on","systems","init","_systems","toInternalSystem","_world","Game","_internal_tick","events_1","_internal_getEvents","event_1","_internal_handleChanges","update","requestAnimationFrame","Date","now","components","every","isComponent","has","some"],"mappings":"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"}